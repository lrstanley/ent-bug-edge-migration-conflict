// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/ent-bug-edge-migration-conflict/ent/userguild"
)

// UserGuild is the model entity for the UserGuild schema.
type UserGuild struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Guild id.
	GuildID string `json:"guild_id,omitempty"`
	// Guild name (2-100 chars, excl. trailing/leading spaces).
	Name string `json:"name,omitempty"`
	// True if the user is the owner of the guild.
	Owner bool `json:"owner,omitempty"`
	// True if the user has admin permissions in the guild (pulled from permissions).
	Admin bool `json:"admin,omitempty"`
	// Enabled guild features.
	Features []string `json:"features,omitempty"`
	// Icon hash.
	IconHash string `json:"icon_hash,omitempty"`
	// IconURL holds the value of the "icon_url" field.
	IconURL string `json:"icon_url,omitempty"`
	// Permissions for the user (excludes overrides).
	Permissions uint64 `json:"permissions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserGuildQuery when eager-loading is set.
	Edges UserGuildEdges `json:"edges"`
}

// UserGuildEdges holds the relations/edges for other nodes in the graph.
type UserGuildEdges struct {
	// The users that are an admin (or owner) of this server.
	Admins []*User `json:"admins,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AdminsOrErr returns the Admins value or an error if the edge
// was not loaded in eager-loading.
func (e UserGuildEdges) AdminsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Admins, nil
	}
	return nil, &NotLoadedError{edge: "admins"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserGuild) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userguild.FieldFeatures:
			values[i] = new([]byte)
		case userguild.FieldOwner, userguild.FieldAdmin:
			values[i] = new(sql.NullBool)
		case userguild.FieldID, userguild.FieldPermissions:
			values[i] = new(sql.NullInt64)
		case userguild.FieldGuildID, userguild.FieldName, userguild.FieldIconHash, userguild.FieldIconURL:
			values[i] = new(sql.NullString)
		case userguild.FieldCreateTime, userguild.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserGuild", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserGuild fields.
func (ug *UserGuild) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userguild.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ug.ID = int(value.Int64)
		case userguild.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ug.CreateTime = value.Time
			}
		case userguild.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ug.UpdateTime = value.Time
			}
		case userguild.FieldGuildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				ug.GuildID = value.String
			}
		case userguild.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ug.Name = value.String
			}
		case userguild.FieldOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				ug.Owner = value.Bool
			}
		case userguild.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				ug.Admin = value.Bool
			}
		case userguild.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ug.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case userguild.FieldIconHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_hash", values[i])
			} else if value.Valid {
				ug.IconHash = value.String
			}
		case userguild.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				ug.IconURL = value.String
			}
		case userguild.FieldPermissions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				ug.Permissions = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryAdmins queries the "admins" edge of the UserGuild entity.
func (ug *UserGuild) QueryAdmins() *UserQuery {
	return (&UserGuildClient{config: ug.config}).QueryAdmins(ug)
}

// Update returns a builder for updating this UserGuild.
// Note that you need to call UserGuild.Unwrap() before calling this method if this UserGuild
// was returned from a transaction, and the transaction was committed or rolled back.
func (ug *UserGuild) Update() *UserGuildUpdateOne {
	return (&UserGuildClient{config: ug.config}).UpdateOne(ug)
}

// Unwrap unwraps the UserGuild entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ug *UserGuild) Unwrap() *UserGuild {
	_tx, ok := ug.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserGuild is not a transactional entity")
	}
	ug.config.driver = _tx.drv
	return ug
}

// String implements the fmt.Stringer.
func (ug *UserGuild) String() string {
	var builder strings.Builder
	builder.WriteString("UserGuild(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ug.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ug.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ug.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("guild_id=")
	builder.WriteString(ug.GuildID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ug.Name)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(fmt.Sprintf("%v", ug.Owner))
	builder.WriteString(", ")
	builder.WriteString("admin=")
	builder.WriteString(fmt.Sprintf("%v", ug.Admin))
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", ug.Features))
	builder.WriteString(", ")
	builder.WriteString("icon_hash=")
	builder.WriteString(ug.IconHash)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(ug.IconURL)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(fmt.Sprintf("%v", ug.Permissions))
	builder.WriteByte(')')
	return builder.String()
}

// UserGuilds is a parsable slice of UserGuild.
type UserGuilds []*UserGuild

func (ug UserGuilds) config(cfg config) {
	for _i := range ug {
		ug[_i].config = cfg
	}
}
