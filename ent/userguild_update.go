// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/ent-bug-edge-migration-conflict/ent/predicate"
	"github.com/lrstanley/ent-bug-edge-migration-conflict/ent/user"
	"github.com/lrstanley/ent-bug-edge-migration-conflict/ent/userguild"
)

// UserGuildUpdate is the builder for updating UserGuild entities.
type UserGuildUpdate struct {
	config
	hooks    []Hook
	mutation *UserGuildMutation
}

// Where appends a list predicates to the UserGuildUpdate builder.
func (ugu *UserGuildUpdate) Where(ps ...predicate.UserGuild) *UserGuildUpdate {
	ugu.mutation.Where(ps...)
	return ugu
}

// SetUpdateTime sets the "update_time" field.
func (ugu *UserGuildUpdate) SetUpdateTime(t time.Time) *UserGuildUpdate {
	ugu.mutation.SetUpdateTime(t)
	return ugu
}

// SetName sets the "name" field.
func (ugu *UserGuildUpdate) SetName(s string) *UserGuildUpdate {
	ugu.mutation.SetName(s)
	return ugu
}

// SetOwner sets the "owner" field.
func (ugu *UserGuildUpdate) SetOwner(b bool) *UserGuildUpdate {
	ugu.mutation.SetOwner(b)
	return ugu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (ugu *UserGuildUpdate) SetNillableOwner(b *bool) *UserGuildUpdate {
	if b != nil {
		ugu.SetOwner(*b)
	}
	return ugu
}

// ClearOwner clears the value of the "owner" field.
func (ugu *UserGuildUpdate) ClearOwner() *UserGuildUpdate {
	ugu.mutation.ClearOwner()
	return ugu
}

// SetAdmin sets the "admin" field.
func (ugu *UserGuildUpdate) SetAdmin(b bool) *UserGuildUpdate {
	ugu.mutation.SetAdmin(b)
	return ugu
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (ugu *UserGuildUpdate) SetNillableAdmin(b *bool) *UserGuildUpdate {
	if b != nil {
		ugu.SetAdmin(*b)
	}
	return ugu
}

// ClearAdmin clears the value of the "admin" field.
func (ugu *UserGuildUpdate) ClearAdmin() *UserGuildUpdate {
	ugu.mutation.ClearAdmin()
	return ugu
}

// SetFeatures sets the "features" field.
func (ugu *UserGuildUpdate) SetFeatures(s []string) *UserGuildUpdate {
	ugu.mutation.SetFeatures(s)
	return ugu
}

// ClearFeatures clears the value of the "features" field.
func (ugu *UserGuildUpdate) ClearFeatures() *UserGuildUpdate {
	ugu.mutation.ClearFeatures()
	return ugu
}

// SetIconHash sets the "icon_hash" field.
func (ugu *UserGuildUpdate) SetIconHash(s string) *UserGuildUpdate {
	ugu.mutation.SetIconHash(s)
	return ugu
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (ugu *UserGuildUpdate) SetNillableIconHash(s *string) *UserGuildUpdate {
	if s != nil {
		ugu.SetIconHash(*s)
	}
	return ugu
}

// ClearIconHash clears the value of the "icon_hash" field.
func (ugu *UserGuildUpdate) ClearIconHash() *UserGuildUpdate {
	ugu.mutation.ClearIconHash()
	return ugu
}

// SetIconURL sets the "icon_url" field.
func (ugu *UserGuildUpdate) SetIconURL(s string) *UserGuildUpdate {
	ugu.mutation.SetIconURL(s)
	return ugu
}

// SetPermissions sets the "permissions" field.
func (ugu *UserGuildUpdate) SetPermissions(u uint64) *UserGuildUpdate {
	ugu.mutation.ResetPermissions()
	ugu.mutation.SetPermissions(u)
	return ugu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (ugu *UserGuildUpdate) SetNillablePermissions(u *uint64) *UserGuildUpdate {
	if u != nil {
		ugu.SetPermissions(*u)
	}
	return ugu
}

// AddPermissions adds u to the "permissions" field.
func (ugu *UserGuildUpdate) AddPermissions(u int64) *UserGuildUpdate {
	ugu.mutation.AddPermissions(u)
	return ugu
}

// ClearPermissions clears the value of the "permissions" field.
func (ugu *UserGuildUpdate) ClearPermissions() *UserGuildUpdate {
	ugu.mutation.ClearPermissions()
	return ugu
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (ugu *UserGuildUpdate) AddAdminIDs(ids ...int) *UserGuildUpdate {
	ugu.mutation.AddAdminIDs(ids...)
	return ugu
}

// AddAdmins adds the "admins" edges to the User entity.
func (ugu *UserGuildUpdate) AddAdmins(u ...*User) *UserGuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ugu.AddAdminIDs(ids...)
}

// Mutation returns the UserGuildMutation object of the builder.
func (ugu *UserGuildUpdate) Mutation() *UserGuildMutation {
	return ugu.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (ugu *UserGuildUpdate) ClearAdmins() *UserGuildUpdate {
	ugu.mutation.ClearAdmins()
	return ugu
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (ugu *UserGuildUpdate) RemoveAdminIDs(ids ...int) *UserGuildUpdate {
	ugu.mutation.RemoveAdminIDs(ids...)
	return ugu
}

// RemoveAdmins removes "admins" edges to User entities.
func (ugu *UserGuildUpdate) RemoveAdmins(u ...*User) *UserGuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ugu.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ugu *UserGuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ugu.defaults()
	if len(ugu.hooks) == 0 {
		if err = ugu.check(); err != nil {
			return 0, err
		}
		affected, err = ugu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserGuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ugu.check(); err != nil {
				return 0, err
			}
			ugu.mutation = mutation
			affected, err = ugu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ugu.hooks) - 1; i >= 0; i-- {
			if ugu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ugu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ugu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ugu *UserGuildUpdate) SaveX(ctx context.Context) int {
	affected, err := ugu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ugu *UserGuildUpdate) Exec(ctx context.Context) error {
	_, err := ugu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ugu *UserGuildUpdate) ExecX(ctx context.Context) {
	if err := ugu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ugu *UserGuildUpdate) defaults() {
	if _, ok := ugu.mutation.UpdateTime(); !ok {
		v := userguild.UpdateDefaultUpdateTime()
		ugu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ugu *UserGuildUpdate) check() error {
	if v, ok := ugu.mutation.Name(); ok {
		if err := userguild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserGuild.name": %w`, err)}
		}
	}
	if v, ok := ugu.mutation.IconHash(); ok {
		if err := userguild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "UserGuild.icon_hash": %w`, err)}
		}
	}
	if v, ok := ugu.mutation.IconURL(); ok {
		if err := userguild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "UserGuild.icon_url": %w`, err)}
		}
	}
	return nil
}

func (ugu *UserGuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userguild.Table,
			Columns: userguild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userguild.FieldID,
			},
		},
	}
	if ps := ugu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ugu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userguild.FieldUpdateTime,
		})
	}
	if value, ok := ugu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldName,
		})
	}
	if value, ok := ugu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userguild.FieldOwner,
		})
	}
	if ugu.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userguild.FieldOwner,
		})
	}
	if value, ok := ugu.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userguild.FieldAdmin,
		})
	}
	if ugu.mutation.AdminCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userguild.FieldAdmin,
		})
	}
	if value, ok := ugu.mutation.Features(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: userguild.FieldFeatures,
		})
	}
	if ugu.mutation.FeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: userguild.FieldFeatures,
		})
	}
	if value, ok := ugu.mutation.IconHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldIconHash,
		})
	}
	if ugu.mutation.IconHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userguild.FieldIconHash,
		})
	}
	if value, ok := ugu.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldIconURL,
		})
	}
	if value, ok := ugu.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userguild.FieldPermissions,
		})
	}
	if value, ok := ugu.mutation.AddedPermissions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userguild.FieldPermissions,
		})
	}
	if ugu.mutation.PermissionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userguild.FieldPermissions,
		})
	}
	if ugu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugu.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !ugu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ugu.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ugu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userguild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserGuildUpdateOne is the builder for updating a single UserGuild entity.
type UserGuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserGuildMutation
}

// SetUpdateTime sets the "update_time" field.
func (uguo *UserGuildUpdateOne) SetUpdateTime(t time.Time) *UserGuildUpdateOne {
	uguo.mutation.SetUpdateTime(t)
	return uguo
}

// SetName sets the "name" field.
func (uguo *UserGuildUpdateOne) SetName(s string) *UserGuildUpdateOne {
	uguo.mutation.SetName(s)
	return uguo
}

// SetOwner sets the "owner" field.
func (uguo *UserGuildUpdateOne) SetOwner(b bool) *UserGuildUpdateOne {
	uguo.mutation.SetOwner(b)
	return uguo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (uguo *UserGuildUpdateOne) SetNillableOwner(b *bool) *UserGuildUpdateOne {
	if b != nil {
		uguo.SetOwner(*b)
	}
	return uguo
}

// ClearOwner clears the value of the "owner" field.
func (uguo *UserGuildUpdateOne) ClearOwner() *UserGuildUpdateOne {
	uguo.mutation.ClearOwner()
	return uguo
}

// SetAdmin sets the "admin" field.
func (uguo *UserGuildUpdateOne) SetAdmin(b bool) *UserGuildUpdateOne {
	uguo.mutation.SetAdmin(b)
	return uguo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uguo *UserGuildUpdateOne) SetNillableAdmin(b *bool) *UserGuildUpdateOne {
	if b != nil {
		uguo.SetAdmin(*b)
	}
	return uguo
}

// ClearAdmin clears the value of the "admin" field.
func (uguo *UserGuildUpdateOne) ClearAdmin() *UserGuildUpdateOne {
	uguo.mutation.ClearAdmin()
	return uguo
}

// SetFeatures sets the "features" field.
func (uguo *UserGuildUpdateOne) SetFeatures(s []string) *UserGuildUpdateOne {
	uguo.mutation.SetFeatures(s)
	return uguo
}

// ClearFeatures clears the value of the "features" field.
func (uguo *UserGuildUpdateOne) ClearFeatures() *UserGuildUpdateOne {
	uguo.mutation.ClearFeatures()
	return uguo
}

// SetIconHash sets the "icon_hash" field.
func (uguo *UserGuildUpdateOne) SetIconHash(s string) *UserGuildUpdateOne {
	uguo.mutation.SetIconHash(s)
	return uguo
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (uguo *UserGuildUpdateOne) SetNillableIconHash(s *string) *UserGuildUpdateOne {
	if s != nil {
		uguo.SetIconHash(*s)
	}
	return uguo
}

// ClearIconHash clears the value of the "icon_hash" field.
func (uguo *UserGuildUpdateOne) ClearIconHash() *UserGuildUpdateOne {
	uguo.mutation.ClearIconHash()
	return uguo
}

// SetIconURL sets the "icon_url" field.
func (uguo *UserGuildUpdateOne) SetIconURL(s string) *UserGuildUpdateOne {
	uguo.mutation.SetIconURL(s)
	return uguo
}

// SetPermissions sets the "permissions" field.
func (uguo *UserGuildUpdateOne) SetPermissions(u uint64) *UserGuildUpdateOne {
	uguo.mutation.ResetPermissions()
	uguo.mutation.SetPermissions(u)
	return uguo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (uguo *UserGuildUpdateOne) SetNillablePermissions(u *uint64) *UserGuildUpdateOne {
	if u != nil {
		uguo.SetPermissions(*u)
	}
	return uguo
}

// AddPermissions adds u to the "permissions" field.
func (uguo *UserGuildUpdateOne) AddPermissions(u int64) *UserGuildUpdateOne {
	uguo.mutation.AddPermissions(u)
	return uguo
}

// ClearPermissions clears the value of the "permissions" field.
func (uguo *UserGuildUpdateOne) ClearPermissions() *UserGuildUpdateOne {
	uguo.mutation.ClearPermissions()
	return uguo
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (uguo *UserGuildUpdateOne) AddAdminIDs(ids ...int) *UserGuildUpdateOne {
	uguo.mutation.AddAdminIDs(ids...)
	return uguo
}

// AddAdmins adds the "admins" edges to the User entity.
func (uguo *UserGuildUpdateOne) AddAdmins(u ...*User) *UserGuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uguo.AddAdminIDs(ids...)
}

// Mutation returns the UserGuildMutation object of the builder.
func (uguo *UserGuildUpdateOne) Mutation() *UserGuildMutation {
	return uguo.mutation
}

// ClearAdmins clears all "admins" edges to the User entity.
func (uguo *UserGuildUpdateOne) ClearAdmins() *UserGuildUpdateOne {
	uguo.mutation.ClearAdmins()
	return uguo
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (uguo *UserGuildUpdateOne) RemoveAdminIDs(ids ...int) *UserGuildUpdateOne {
	uguo.mutation.RemoveAdminIDs(ids...)
	return uguo
}

// RemoveAdmins removes "admins" edges to User entities.
func (uguo *UserGuildUpdateOne) RemoveAdmins(u ...*User) *UserGuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uguo.RemoveAdminIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uguo *UserGuildUpdateOne) Select(field string, fields ...string) *UserGuildUpdateOne {
	uguo.fields = append([]string{field}, fields...)
	return uguo
}

// Save executes the query and returns the updated UserGuild entity.
func (uguo *UserGuildUpdateOne) Save(ctx context.Context) (*UserGuild, error) {
	var (
		err  error
		node *UserGuild
	)
	uguo.defaults()
	if len(uguo.hooks) == 0 {
		if err = uguo.check(); err != nil {
			return nil, err
		}
		node, err = uguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserGuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uguo.check(); err != nil {
				return nil, err
			}
			uguo.mutation = mutation
			node, err = uguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uguo.hooks) - 1; i >= 0; i-- {
			if uguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserGuild)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserGuildMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uguo *UserGuildUpdateOne) SaveX(ctx context.Context) *UserGuild {
	node, err := uguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uguo *UserGuildUpdateOne) Exec(ctx context.Context) error {
	_, err := uguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uguo *UserGuildUpdateOne) ExecX(ctx context.Context) {
	if err := uguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uguo *UserGuildUpdateOne) defaults() {
	if _, ok := uguo.mutation.UpdateTime(); !ok {
		v := userguild.UpdateDefaultUpdateTime()
		uguo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uguo *UserGuildUpdateOne) check() error {
	if v, ok := uguo.mutation.Name(); ok {
		if err := userguild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserGuild.name": %w`, err)}
		}
	}
	if v, ok := uguo.mutation.IconHash(); ok {
		if err := userguild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "UserGuild.icon_hash": %w`, err)}
		}
	}
	if v, ok := uguo.mutation.IconURL(); ok {
		if err := userguild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "UserGuild.icon_url": %w`, err)}
		}
	}
	return nil
}

func (uguo *UserGuildUpdateOne) sqlSave(ctx context.Context) (_node *UserGuild, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userguild.Table,
			Columns: userguild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userguild.FieldID,
			},
		},
	}
	id, ok := uguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserGuild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userguild.FieldID)
		for _, f := range fields {
			if !userguild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userguild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userguild.FieldUpdateTime,
		})
	}
	if value, ok := uguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldName,
		})
	}
	if value, ok := uguo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userguild.FieldOwner,
		})
	}
	if uguo.mutation.OwnerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userguild.FieldOwner,
		})
	}
	if value, ok := uguo.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: userguild.FieldAdmin,
		})
	}
	if uguo.mutation.AdminCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: userguild.FieldAdmin,
		})
	}
	if value, ok := uguo.mutation.Features(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: userguild.FieldFeatures,
		})
	}
	if uguo.mutation.FeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: userguild.FieldFeatures,
		})
	}
	if value, ok := uguo.mutation.IconHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldIconHash,
		})
	}
	if uguo.mutation.IconHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: userguild.FieldIconHash,
		})
	}
	if value, ok := uguo.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userguild.FieldIconURL,
		})
	}
	if value, ok := uguo.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userguild.FieldPermissions,
		})
	}
	if value, ok := uguo.mutation.AddedPermissions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: userguild.FieldPermissions,
		})
	}
	if uguo.mutation.PermissionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: userguild.FieldPermissions,
		})
	}
	if uguo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uguo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !uguo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uguo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userguild.AdminsTable,
			Columns: userguild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserGuild{config: uguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userguild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
